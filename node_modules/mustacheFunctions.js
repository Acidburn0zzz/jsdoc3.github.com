/*jslint indent: 4, maxerr: 50, white: true, node: true, stupid: true */

/**
 * @file This file contains tag handlers and utility functions used in converting 
 *  mustache tags and templates into html. 
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @version 20121030
 * @requires fs
 * @requires path
 * @requires textTransformers
 * @requires MustacheComb
 * @requires colors
 * @exports MustacheComb
 */

'use strict';

var fs, path, textTransformers, MustacheComb, colors;

fs              = require('fs');
path            = require('path');
textTransformers= require('textTransformers');
MustacheComb    = require('MustacheComb').MustacheComb;
colors          = require('colors');
colors.setTheme(JSON.parse(fs.readFileSync('jake/confFiles/consoleColors.json', 'utf8')));

/**
 * Autogenerates a list of links from articles.
 * @param {String} fileNamePrefix article files beginning
 *  with this string will be linked to in this list. The
 *  metadata will be used from each file. The title is
 *  mapped to be the displayed text of the link, the out
 *  (filename) is mapped to the href of the link, and the
 *  description is mapped to the description shown below
 *  the link.
 * @returns Returns an html list of links formatted as
 *  dictionary terms and definitions.
 */
MustacheComb.prototype.generateLinksList = function generateLinksList(fileNamePrefix) {
    var out, my;
    out = '';
    my = this;
    fileNamePrefix = String(fileNamePrefix.replace(/\r/g,'').split('\n')[0].trim());
    
    this.articles.forEach(function (article) {
        if (article.out.indexOf(fileNamePrefix) !== 0) {
            return ' ';
        }
        var location    = article.out,
            text        = article.title,
            description = article.description;
            
        out += my.Mustache.to_html(
            my.templates.linksList, {
            linkLocation    : location,
            linkText        : text,
            linkDescription : description
        });
    });
    return out;
};

/**
 * Tag handler for the example tag. Formats the text for html
 *  and prettification.
 * @function`
 * @param {String} text A string of text to process.
 */
MustacheComb.prototype.formatExample = function formatExample(text) {
    var parts, title, offset, code, html;
    
    // normalizing line endings
    text  = textTransformers.convertEOL(text, '\n');
    // creating an array of lines.
    parts = text.split('\n');
    // the first line of the text is the title of the example code.
    title = parts.shift().trim();
    // converting any tabs in white space preceeding the line, into four spaces.
    parts = parts.map(textTransformers.normalizeWhiteSpacePrefix);
    // Since indentation in the article is directly transferred to the displayed 
    // example, we may need to remove some white space. (thinks of shift+tab).
    offset = textTransformers.getOffset(parts[0]);
    parts  = parts.map(function(text) {
        return textTransformers.offsetWhiteSpace(text, offset);
    });
    // creating a string rom an array of lines.
    code = parts.join('\n');
    // filtering out characters that screw up the html.
    code = code.replace(/[<]/g, '&lt;');
    // Formatting the data into html.
    html = this.Mustache.to_html(
        this.templates.example, {
        codeTitle : title,
        codeBody  : code
    });
    return html;
};

/**
 * Function for including files. Files may contain mustache tags.
 * @param {String} text The path to the file to include.
 * @returns Returns the contents of the file.
 */
MustacheComb.prototype.mustacheIncluder = function mustacheIncluder(text) {
    var out,
        relPath;
    // the text of the include tag is a path, possibly surrounded with whitespace.
    relPath = text.trim();
    // try to get the file contents.
    try {
        out = String(fs.readFileSync(relPath));
    // if file contents cannot be retreived generate a link to where the file is, or should have been.
    } catch (e) {
        console.log('  MustacheComb.mustacheIncluder : '.warn);
        console.log(String(e).error);
        out = '<p>Documentation not found at <a href="' + relPath + '"><code>' + relPath + '</code></a></p>';
    }
    // Run the output through Mustache to parse any mustache tags it may contain.
    out = this.Mustache.to_html(this.templates.includes, this.mustacheTagHandlers, {includes : out});
    return out;
};

/**
 * Main mustache function for generating jsdoc3 pages. This may
 *  be used to process a single article file.
 * @param {Object} article The article object to process.
 * @returns {String} Returns the text as transformed by mustache.
 */
MustacheComb.prototype.mainMustache = function mainMustache(article) {
    var out, mustacheTemplateParts;
    // the generic page structure used repeatedly on the site.
    mustacheTemplateParts = {
        head    : this.templates.head,
        foot    : this.templates.foot,
        article : article.body
    };
    // there is nothing special to do with this information besides apply it to a template.
    this.mustacheTagHandlers.title       = article.title;
    this.mustacheTagHandlers.description = article.description;
    this.mustacheTagHandlers.keywords    = article.keywords;
    out = this.Mustache.to_html(this.templates.article, this.mustacheTagHandlers, mustacheTemplateParts);
    
    return out;
};

/**
 * Generates HTML files from this.article objects array.
 * @function
 */
MustacheComb.prototype.buildArticles = function buildArticles() {
    var my = this;
    this.articles.forEach(function (article) {
        console.log('article write attempt'.info, article.title.data);
        var html = my.mainMustache(article);
        fs.writeFileSync(path.join(my.outdir, article.out), html, 'utf8');
        console.log('article created'.info, my.outdir.data + article.out.help);
    });
};

/**
 * Generates HTML files from article objects array.
 * @param {Array} this.articles An array of article objects obtained
 *  from the ArticleParser or other means. Defaults to this.articles.
 * @param {String} outdir The directory you want the generated articles
 *  to go in. Defaults to this.outdir.
 */
MustacheComb.prototype.generateArticles = function generateArticles(articles, outdir) {
    this.articles            = articles || this.articles;
    this.outdir              = outdir || this.outdir;
    this.buildArticles();
};


exports.MustacheComb = MustacheComb;
