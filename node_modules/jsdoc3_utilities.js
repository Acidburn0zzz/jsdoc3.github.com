/*jslint indent: 4, maxerr: 50, white: true, node: true, stupid: true */

/**
 * @file This file contains small utilities specific to jsdoc3.github.com.
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @version 20121028
 * @requires path
 * @requires jsdoc3_commandlines
 * @requires Exists
 */

'use strict';

var path,
    jsdoc3_commandlines,
    Exists,
    exists,
    jsdocPaths,
    jakeApiDirectories;
    
path = require('path');
jsdoc3_commandlines = require('jsdoc3_commandlines');
Exists = require('Exists').Exists;
exists = new Exists();

exists.on('error', function(err) {
    console.log(err);
    process.exit(1);
});

/**
 * Verifies that the locations of jsdoc and the documentation project are
 *  known.
 * @function
 * @returns {Object} Returns an object containing the resolved paths to both
 *  projects, or an error will be emitted by one of the verifircation
 *  methods.
 */
function verifyJsdocPathsAndFiles() {
    var out, usage;
    
    out = {
        jsdocLocation     : process.argv[2] || path.resolve(process.cwd(), '../jsdoc'),
        jsdocDocsLocation : process.argv[3] || path.resolve(process.cwd(), '../jsdoc3.github.com')
    };
    
    usage  = 'usage: node ' + require.main.filename;
    usage += ' <jsdoc directory> <jsdoc docs project directory>';
    
    function showUsage() {
        console.log(usage);
    }
    
    exists.on('error', showUsage);
    
    exists.dirMustExist(out.jsdocLocation);
    exists.dirMustExist(out.jsdocDocsLocation);
    
    exists.fileMustExist(
        path.resolve(out.jsdocLocation, 'jsdoc.js')
    );
    exists.fileMustExist(
        path.resolve(out.jsdocDocsLocation, 'jakefile.js')
    );
    
    exists.removeListener('error', showUsage);
    
    return out;
}

/**
 * Creates a command, suitable for the cmd.commandRegister.Asynchronous
 *  queue that will run Jsdoc on some place.
 * @param {Boolean} recurse Whether or not jsdoc should recurse.
 * @param {String} place Path appended to both the location of
 *  jsdoc and the documentation project.
 * @param {Function} callback A callback function to execute when
 *  jsdoc3_commandlines.runJsdocOn has completed.
 */
function createRunJsdocCommand(recurse, place) {
    var jsdocLocation, source, destination, configFileLoc;
    
    jsdocLocation = jsdocPaths.jsdocLocation;
    source = jsdocPaths.jsdocLocation + '/' + place;
    destination = jakeApiDirectories.jsdocRootOutputDir + '/' + place;
    configFileLoc = path.resolve(jsdocPaths.jsdocDocsLocation, 'Jake/confFiles/conf.json');
    
    return function (callback) {
        jsdoc3_commandlines.runJsdocOn(
            jsdocLocation,
            source,
            destination,
            recurse,
            configFileLoc,
            callback
        );
    };
}

function rebuildDescribeTags(callback) {
    var jsdocLocation, destination;
    jsdocLocation = jsdocPaths.jsdocLocation;
    destination   = jakeApiDirectories.describeTagsOutputDir;
    
    jsdoc3_commandlines.rebuildDescribeTags(jsdocLocation, destination, callback);
}

function runJake(callback) {
    var jakeLocation, jakeFile;
    jakeLocation = jsdocPaths.jsdocDocsLocation;
    jakeFile = 'jakefile.js';
    jsdoc3_commandlines.runJake(jakeFile, jakeLocation, callback);
}

jsdocPaths = verifyJsdocPathsAndFiles();

jakeApiDirectories = {
    'describeTagsOutputDir' : path.resolve(jsdocPaths.jsdocDocsLocation, 'Jake/API/describeTags'),
    'jsdocRootOutputDir'    : path.resolve(jsdocPaths.jsdocDocsLocation, 'Jake/API/jsdoc')
};

exports.jsdocPaths               = jsdocPaths;
exports.jakeApiDirectories       = jakeApiDirectories;
exports.verifyJsdocPathsAndFiles = verifyJsdocPathsAndFiles;
exports.createRunJsdocCommand    = createRunJsdocCommand;
exports.rebuildDescribeTags      = rebuildDescribeTags;
exports.runJake                  = runJake;
