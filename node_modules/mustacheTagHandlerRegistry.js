/*jslint indent: 4, maxerr: 50, white: true, node: true, stupid: true, sloppy: true */

/**
 * @file This file contains the tag handler registry for our useage
 *  of mustache.
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @version 20121030
 * @exports tagHandlerManager
 */

/**
 * This is not intended to be run on it's own. It is called
 *  in MustacheComb on it's 'this' object. This way, we can
 *  keep a separate registry for the tag handlers and better
 *  manage everything. To register a new tag handler simply
 *  put in an entry to the effect of 
 *  <code>
 *  my.addMustacheTagHandler(<tagname>,
 * <MustacheComb.prototype.funcname>);
 * </code>
 */
function tagHandlerManager() {
    
    var my = this;
    
    /**
     * Contains functions for handling mustache tags.
     * @namespace
     */
    my.mustacheTagHandlers = {};
    
    /**
     * Adds a handler function for mustache tags. You will be responsible
     *  for generating whatever you want the tag to be replaced with. In
     *  general, the text can be run through mustache to parse any tags in
     *  it or tags can be used as markers for where you're going to
     *  programatically generate content and insert it.
     * @function
     * @param {String} handles The name of the tag to handle {{#whatever}}{{/whatever}}
     * @param {String} func The name of a function which has been added
     *  to the MustacheComb prototype.
     * @see MustacheComb
     */
    my.addMustacheTagHandler = function(handles, func) {
        my.mustacheTagHandlers[handles] = function() {
            return function(text, whatever) {
                return my[func](text, whatever);
            };
        };
    };
    
    my.addMustacheTagHandler('example', 'formatExample');
    my.addMustacheTagHandler('generateLinksList', 'generateLinksList');
    my.addMustacheTagHandler('include', 'mustacheIncluder');
}

exports.tagHandlerManager = tagHandlerManager;