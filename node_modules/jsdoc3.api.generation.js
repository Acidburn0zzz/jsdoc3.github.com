/*jslint indent: 4, maxerr: 50, white: true, node: true, stupid: true */

/**
 * @file Calls jsdoc --describeTags htmlFiles -d <jsdoc3.github.com> to
 *  update the tags definition files. Generates API documentation from 
 *  JSDoc 3. Then calls jake to rebuild the docs.
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @version 20121027
 * @requires events
 * @requires fs
 * @requires path
 * @requires cmd
 * @requires Exists
 */

'use strict';

var events,
    fs,
    path,
    cmd,
    Exists,
    exists,
    emitter,
    jsdocPaths,
    jakeApiDirectories,
    asynchronousCommands;

events = require('events');
fs     = require('fs');
path   = require('path');
cmd    = require('cmd');
Exists = require('Exists').Exists;

exists = new Exists();
emitter= new events.EventEmitter();

emitter.on('error',
    function(err) {
        console.log(err);
        process.exit(1);
    }
);

/**
 * Verifies that the locations of jsdoc and the documentation project are
 *  known.
 * @function
 * @returns {Object} Returns an object containing the resolved paths to both
 *  projects, or an error will be emitted by one of the verifircation
 *  methods.
 */
function verifyJsdocPathsAndFiles() {
    var out, errorMessages;
    
    out = {
        jsdocLocation     : process.argv[2] || path.resolve(process.cwd(), '../jsdoc'),
        jsdocDocsLocation : process.argv[3] || path.resolve(process.cwd(), '../jsdoc3.github.com')
    };
    
    errorMessages = {
        'usage' : 'Usage: node cp <jsdoc Location> <jsdoc3.github.com Location>'
    };
    
    exists.dirMustExist(out.jsdocLocation, errorMessages.usage);
    exists.dirMustExist(out.jsdocDocsLocation, errorMessages.usage);
    exists.fileMustExist(path.resolve(
        out.jsdocLocation, 'jsdoc.js'), errorMessages.usage);
    exists.fileMustExist(path.resolve(
        out.jsdocDocsLocation, 'jakefile.js'), errorMessages.usage);
    return out;
}

jsdocPaths = verifyJsdocPathsAndFiles();

jakeApiDirectories = {
    'describeTagsOutputDir' : path.resolve(jsdocPaths.jsdocDocsLocation, 'Jake/API/describeTags'),
    'jsdocRootOutputDir'    : path.resolve(jsdocPaths.jsdocDocsLocation, 'Jake/API/jsdoc')
};

asynchronousCommands = {};
asynchronousCommands.describeTagsCommand  = 'jsdoc --describeTags htmlFiles -d ' + jakeApiDirectories.describeTagsOutputDir;
asynchronousCommands.jake = 'jake';

/**
 * Runs jsdoc using the source and destination supplied.
 * @function
 * @param {Boolean} recurse Set to true to enable JSDoc 3 to recurse into
 *  subdirectories.
 * @param {String} source The path to the source directory or file.
 * @param {String} destination The path to the destination directory.
 * @param {Function} callback Optional. A function to execute upon
 *  completion.
 */
function runJsdocOn(recurse, source, destination, callback) {
    if(recurse === true) { recurse = ' -r'; } else { recurse = ''; }
    source        = path.resolve(source);
    source        = path.relative(jsdocPaths.jsdocLocation, source);
    destination   = path.resolve(destination);
    var configFileLoc = path.resolve(jsdocPaths.jsdocDocsLocation, 
    'Jake/confFiles/conf.json');
    cmd.asynchronousCommand(
        'jsdoc' + recurse + ' -p ' + source + ' -d ' + destination + ' -c ' + configFileLoc,
        jsdocPaths.jsdocLocation,
        callback
    );
}

/**
 * Calls <code>jsdoc --describeTags htmlFiles -d <jsdoc3.github.com> 
 * </code>to update the tags definition files.
 * @function
 * @param {Function} callback Optional. A function to execute upon
 *  completion.
 */
function rebuildDescribeTags(callback) {
    cmd.asynchronousCommand(
        asynchronousCommands.describeTagsCommand,
        jsdocPaths.jsdocLocation,
        callback
    );
}

/**
 * Runs jake in the documentation project
 * @function
 * @param {Function} callback Optional. A function to execute upon completion.
 */
function runJake(callback) {
    cmd.asynchronousCommand(
        asynchronousCommands.jake,
        jsdocPaths.jsdocDocsLocation,
        callback
    );
}

/**
 * Creates a command, suitable for the queue that will runJsdocOn
 *  some place.
 * @param {Boolean} recurse Whether or not jsdoc should recurse.
 * @param {String} place Path appended to both the location of
 *  jsdoc and the documentation project.
 * @param {Function} callback A callback function to execute when
 *  runJsdocOn has completed.
 */
function createRunJsdocCommand(recurse, place) {
    return function (callback) {
        runJsdocOn(
            recurse,
            jsdocPaths.jsdocLocation + '/' + place,
            jakeApiDirectories.jsdocRootOutputDir + '/' + place,
            callback
        );
    };
}

function generateDocs() {
    var syncReg, asyncReg, places, recurse;
    
    syncReg = new cmd.commandRegister.Synchronous('sync');
    asyncReg = new cmd.commandRegister.Asynchronous('async');
    
    syncReg.on('command queue processed', function (name) {
        console.log('register ' + name + ' has finished');
    });
    
    asyncReg.on('command queue processed', function (name) {
        console.log('register ' + name + ' has finished');
        syncReg.process();
    });
    
    syncReg.queue = [
        rebuildDescribeTags,
        runJake
    ];
    
    places = [
        'rhino_modules',
        'templates',
        'plugins',
        'node_modules',
        'jsdoc.js'
    ];
    
    places.forEach(function(place) {
        if(place === 'jsdoc.js') {
            recurse = false;
        } else {
            recurse = true;
        }
        asyncReg.queue.unshift(createRunJsdocCommand(recurse, place));
    });
    
    asyncReg.process();
    
}

generateDocs();