/*jslint indent: 4, maxerr: 50, white: true, node: true, stupid: true */

/**
 * @file This file contains code to rebuild the JsDoc 3 documentation website.
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @version 20121030
 * @module SiteBuilder
 * @requires fs
 * @requires events
 * @requires util
 * @requires path
 * @requires atropa-various-utilities
 * @requires utilities
 * @requires ArticleParser
 * @requires mustacheFunctions
 * @requires ApiGenerator
 * @exports SiteBuilder
 */

'use strict';

var fs,
    events,
    util,
    path,
    directory,
    utilities,
    articleParser,
    mustacheFunctions,
    generator;

fs     = require('fs');
events = require('events');
util   = require('util');
path   = require('path');

directory        = require('atropa-various-utilities').directory;
utilities        = require('./utilities');
articleParser    = new (require('./ArticleParser').ArticleParser)();
mustacheFunctions= require('./mustacheFunctions');
generator        = new (require('./ApiGenerator').ApiGenerator)();

/**
 * Represents the jsdoc 3 website builder.
 * @class
 */
function SiteBuilder() {

    /**
     * Holds the array of articles
     * @default Defaults to an empty array.
     */
    this.articles = [];
    
    /**
     * The source directory where article files are found.
     * @default <code> Jake/articles </code>
     */
    this.srcdir = 'Jake/articles/';
    
    /**
     * The directory to put the generated site pages into.
     * @default <code> ./ </code>
     */
    this.outdir = './';
}

/**
 * Purges files in directories.
 */
SiteBuilder.prototype.preClean = function preClean() {
    console.log('Cleaning pages...');
    [
        this.outdir,
        'Jake/API/jsdoc/rhino_modules',
        'Jake/API/jsdoc/plugins',
        'Jake/API/jsdoc/templates-default',
        'Jake/API/jsdoc/templates-haruki',
        'Jake/API/jsdoc/templates-prettyPrintSource',
        'Jake/API/jsdoc/jsdoc.js',
        'Jake/API/jsdoc/rhino_modules-common',
        'Jake/API/jsdoc/rhino_modules-jsdoc',
        'Jake/API/jsdoc/node_modules-async',
        'Jake/API/jsdoc/node_modules-crypto-browserify',
        'Jake/API/jsdoc/node_modules-github-flavored-markdown',
        'Jake/API/jsdoc/node_modules-js2xmlparser',
        'Jake/API/jsdoc/node_modules-jshint',
        'Jake/API/jsdoc/node_modules-markdown',
        'Jake/API/jsdoc/node_modules-taffydb',
        'Jake/API/jsdoc/node_modules-underscore',
        'Jake/API/jsdoc/node_modules-wrench',
        'Jake/API/describeTags'
    ].forEach(function(where) {
        directory.purgeHtmlPages(where);
    });
};

/**
 * Generates missing tag articles and extended documents files for new tags.
 */
SiteBuilder.prototype.generateMissingTagsArticles = function generateMissingTagsArticles() {
    utilities.generateMissingTagsArticles();
};

/**
 * Parses article files into views for Mustache and stores them in <code> this.articles </code>
 */
SiteBuilder.prototype.parseArticles = function parseArticles() {
    console.log('Building index...');
    articleParser.loadArticleFiles(this.srcdir);
    this.articles = articleParser.getArticles();
};

/**
 * Parses article files and regenerates HTML pages for the site.
 */
SiteBuilder.prototype.buildSitePages = function buildSitePages() {
    var mustachio;
    this.parseArticles();
    console.log('Building new pages...');
    mustachio = new mustacheFunctions.MustacheComb();
    mustachio.generateArticles(this.articles, this.outdir);
};

/**
 * Runs all functions to completely regenerate the site.
 */
SiteBuilder.prototype.buildSite = function buildSite() {
    var my = this;
    console.log('Building site...');
    this.preClean();
    generator.generateDocs(function(){
        my.generateMissingTagsArticles();
        my.buildSitePages();
    });
};

exports.SiteBuilder = SiteBuilder;