/*jslint indent: 4, maxerr: 50, white: true, node: true, stupid: true */

/**
 * @file This file contains tag handlers and utility functions used in converting 
 *  mustache tags and templates into html. 
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @version 20121030
 * @module mustacheFunctions
 * @requires fs
 * @requires path
 * @requires util
 * @requires atropa-mustache-comb
 * @exports MustacheComb
 */

'use strict';

var fs, path, util, MustacheCombBase;

fs              = require('fs');
path            = require('path');
util            = require('util');
MustacheCombBase= require('atropa-mustache-comb');

/**
 * Extends the base MustacheComb class.
 * @class
 */
function MustacheComb() {
    MustacheCombBase.MustacheComb.call(this);
    this.outDir = './';
    this.addTagHandlerFunction('generateLinksList', 'generateLinksList');
    this.addTagHandlerFunction('generateIndex', 'generateIndex');
    this.addTemplateByFile('article', 'Jake/templates/article.mustache');
    this.addTemplateByFile('example', 'Jake/templates/example.mustache');
    this.addTemplateByFile('foot', 'Jake/templates/foot.mustache');
    this.addTemplateByFile('head', 'Jake/templates/head.mustache');
    this.addTemplateByFile('linksList', 'Jake/templates/linksList.mustache');
}
util.inherits(MustacheComb, MustacheCombBase.MustacheComb);

/**
 * generates a list of links to files and directories in the given directory.
 * @param {String} dir The directory to generate an index for.
 * @returns {String} Returns an html string.
 */
MustacheComb.prototype.generateIndex = function generateIndex(dir) {
    var index, out;
    out = '';
    dir = dir.trim();
    index = fs.readdirSync(dir);
    index.forEach(function(item) {
        var stats, url, trailingSlash;
        stats = fs.statSync(path.resolve(dir,item));
        url = path.normalize(dir + '/' + item).replace(/\\/g, '/');
        if(stats.isDirectory()) {
            trailingSlash = '/index.html';
        } else {
            trailingSlash = '';
        }
        out += '<a href="' + url + trailingSlash + '">' + item + '</a>\n<br>\n';
    });
    return out;
};

/**
 * Autogenerates a list of links from articles.
 * @param {String} fileNamePrefix Article files beginning
 *  with this string will be linked to in this list. The
 *  metadata will be used from each file. The title is
 *  mapped to be the displayed text of the link, the out
 *  (filename) is mapped to the href of the link, and the
 *  description is mapped to the description shown below
 *  the link.
 * @returns Returns an html list of links formatted as
 *  dictionary terms and definitions.
 */
MustacheComb.prototype.generateLinksList = function generateLinksList(fileNamePrefix) {
    var out, my;
    out = '';
    my = this;
    fileNamePrefix = String(fileNamePrefix.replace(/\r/g,'').split('\n')[0].trim());
    
    this.views.forEach(function (view) {
        if (view.out.indexOf(fileNamePrefix) !== 0) {
            return ' ';
        }
        var location    = view.out,
            text        = view.title,
            description = view.description;
            
        out += my.Mustache.to_html(
            my.templates.linksList, {
            linkLocation    : location,
            linkText        : text,
            linkDescription : description
        });
    });
    return out;
};

/**
 * Main mustache function for generating jsdoc3 pages. This may
 *  be used to process a single article file.
 * @param {Object} view The view object to process.
 * @returns {String} Returns the text as transformed by mustache.
 */
MustacheComb.prototype.mainMustache = function mainMustache(view) {
    var out, mustacheTemplateParts;
    // the generic page structure used repeatedly on the site.
    mustacheTemplateParts = {
        head    : this.templates.head,
        foot    : this.templates.foot,
        article : view.body
    };
    // there is nothing special to do with this information besides apply it to a template.
    this.mustacheTagHandlers.title       = view.title;
    this.mustacheTagHandlers.description = view.description;
    this.mustacheTagHandlers.keywords    = view.keywords;
    out = this.Mustache.to_html(this.templates.article, this.mustacheTagHandlers, mustacheTemplateParts);
    
    return out;
};

/**
 * Generates HTML files from view objects array.
 * @param {Array} views An array of view objects obtained
 *  from the ArticleParser or other means. Defaults to <code> this.views </code>
 * @param {String} outdir The directory you want the generated articles
 *  to go in. Defaults to this.outdir.
 */
MustacheComb.prototype.generateArticles = function generateArticles(views, outdir) {
    var my;
    my = this;
    
    this.views  = views || this.views;
    this.outdir = outdir || this.outdir;
    
    this.renderViews(function(view) {
        var html = my.mainMustache(view);
        fs.writeFileSync(path.join(my.outdir, view.out), html, 'utf8');
    });
};

exports.MustacheComb = MustacheComb;
