/*jslint indent: 4, maxerr: 50, white: true, node: true, stupid: true */

/**
 * @file This file contains code to parse article files.
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @version 20121030
 * @module ArticleParser
 * @requires fs
 * @requires events
 * @requires util
 * @exports ArticleParser
 */

'use strict';

var fs, events, util, colors;

fs    = require('fs');
events= require('events');
util  = require('util');

/**
 * Represents an article file parser.
 * @class
 */
function ArticleParser() {
    events.EventEmitter.call(this);
    this.articles = [];
    this.articleFiles = [];
}
util.inherits(ArticleParser, events.EventEmitter);

/**
 * Parses article file source into an object.
 * @param {String|Object} body The contents of an article file or an object from the articleFiles array.
 * @returns {Object|Boolean} Returns the source parsed into an object or false.
 * @emits {article parsed} Emits an article parsed event if an article was parsed.
 * @emits {article parse error} Emits an article parse error event if the article could not be parsed.
 */
ArticleParser.prototype.parse = function parse(fileSource) {
        
    var meta, tmp, out;
        
    out = false;
    tmp  = fileSource;
    
    console.log('ArticleParser.parse' + ' : ' + fileSource.fileName);
    fileSource = fileSource.fileSource || fileSource;
    meta = fileSource.match(/^<!--(\{[\s\S]*\})-->/)[1];
    
    if (meta) {
        meta      = JSON.parse(meta);
        meta.body = fileSource.split('}-->')[1];
        out       = meta;
        this.articles.push(meta);
        this.emit('article parsed', out);
    } else {
        this.emit('article parse error', tmp);
    }
    
    return out;
};

/**
 * Gathers article file sources.
 * @function
 * @param {String} srcdir the directory containing articles.
 * @returns {Array} Returns an array of objects containing article file names and sources.
 * @emits {article found} Emits an article found event for every article
 *  found. This event will contain the filename of the article.
 */
ArticleParser.prototype.loadArticleFiles = function loadArticleFiles(srcdir) {
    var tmp, that;
    
    that = this;
    
    fs.readdirSync(srcdir).forEach(function (file) {
        tmp = {};
        if (String(file)[0] === '.') {
            return;
        }
        that.emit('article found', file);
        tmp.fileName   = file;
        tmp.sourceDir  = srcdir;
        tmp.fileSource = fs.readFileSync(srcdir + file, 'utf8');
        that.articleFiles.push(tmp);
    });
    return that.articleFiles;
};

/**
 * Gets the collection of parsed article files.
 * @returns {Array} Returns an array containing parsed article objects.
 */
ArticleParser.prototype.getArticles = function getArticles() {
    var tmp;
    while(this.articleFiles.length > 0) {
        tmp = this.articleFiles.shift();
        this.parse(tmp);
    }
    return this.articles;
};

exports.ArticleParser = ArticleParser;