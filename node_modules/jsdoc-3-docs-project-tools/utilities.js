/*jslint indent: 4, maxerr: 50, white: true, node: true, stupid: true */
/*global array_diff, array_flip */

/**
 * @file This file contains small utilities specific to jsdoc3.github.com.
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @version 20121030
 * @module utilities
 * @requires fs
 * @requires path
 * @requires Exists
 * @exports jsdocPaths
 * @exports jakeApiDirectories
 * @exports verifyJsdocPathsAndFiles
 * @exports generateMissingTagsArticles
 */

'use strict';

var fs,
    path,
    Exists,
    exists,
    jsdocPaths,
    jakeApiDirectories;
    
fs           = require('fs');
path         = require('path');
Exists       = require('atropa-exists').Exists;
exists       = new Exists();


exists.on('error', function(err) {
    console.log(err);
    process.exit(1);
});

/**
 * Verifies that the locations of jsdoc and the documentation project are
 *  known.
 * @function
 * @returns {Object} Returns an object containing the resolved paths to both
 *  projects, or an error will be emitted by one of the verifircation
 *  methods.
 */
function verifyJsdocPathsAndFiles() {
    var out, usage;
    
    out = {
        jsdocLocation     : process.argv[2] || path.resolve(process.cwd(), '../jsdoc'),
        jsdocDocsLocation : process.argv[3] || path.resolve(process.cwd(), '../jsdoc3.github.com')
    };
    
    usage  = 'usage: node ' + require.main.filename;
    usage += ' <jsdoc directory> <jsdoc docs project directory>';
    
    function showUsage() {
        console.log(usage);
    }
    
    exists.on('error', showUsage);
    
    exists.dirMustExist(out.jsdocLocation);
    exists.dirMustExist(out.jsdocDocsLocation);
    
    exists.fileMustExist(
        path.resolve(out.jsdocLocation, 'jsdoc.js')
    );
    exists.fileMustExist(
        path.resolve(out.jsdocDocsLocation, 'jakefile.js')
    );
    
    exists.removeListener('error', showUsage);
    
    return out;
}


/**
 * Generates missing article files and extended docs for
 * tags that have definitions but no articles.
 * @function
 * @requires phpjs
 * @requires mustacheFunctions
 * @requires atropa-various-utilities
 */
function generateMissingTagsArticles() {
    console.log('Checking for missing tags articles');
    var php,
        MustacheComb,
        mustachio,
        directory,
        tmp,
        api,
        art,
        test,
        mustacheTemplateParts,
        articleFile,
        extendedDoc;
        
    php          = require('phpjs').registerGlobals();
    MustacheComb = require('./mustacheFunctions').MustacheComb;
    directory    = require('atropa-various-utilities').directory;
    
    mustachio = new MustacheComb();
    
    function getFilenamePrefixTest(prefix) {
        return function test(file) {
            var out = false;
            if(file.indexOf(String(prefix)) === 0) {
                out = true;
            } else {
                out = false;
            }
            return out;
        };
    }

    api = {
        'dir' : 'Jake/API/describeTags',
        'list': []
    };
    art = {
        'dir'     : 'Jake/articles',
        'list'    : [],
        'missing' : {}
    };

    // get the lists of files to compare.
    test     = getFilenamePrefixTest('tags-');
    api.list = directory.filterList(api.dir, test);
    art.list = directory.filterList(art.dir, test);
    // remove file extension
    api.list = api.list.map(function(e){
        return e.replace(/\.html/, '');
    });
    // get the difference between the two
    art.missing = array_diff(api.list, art.list);
    // flip keys for values
    art.missing = array_flip(art.missing);
    
    mustacheTemplateParts = {};
    
    for(tmp in art.missing) {
        if(art.missing.hasOwnProperty(tmp)) {
            // generating data for the template
            mustachio.mustacheTagHandlers.tagName = tmp;
            mustachio.mustacheTagHandlers.tagBaseName = tmp.replace(/^tags-/,'');
            // generating article template file.
            articleFile = mustachio.Mustache.to_html(mustachio.templates.tags, mustachio.mustacheTagHandlers, mustacheTemplateParts);
            fs.writeFileSync(path.join(art.dir, tmp), articleFile, 'utf8');
            // generating extended documentation html file.
            extendedDoc = '<p>TODO: Finish Documentation</p>';
            fs.writeFileSync(path.join(art.dir, '../extended_docs/tags/' + tmp), extendedDoc, 'utf8');
        }
    }
    console.log('Finished checking for missing tags articles.');
    console.log('New articles found' + ' : ');
    console.dir(art.missing);
}

/**
 * Contains paths to jsdoc and jsdoc3.github.com
 */
jsdocPaths = verifyJsdocPathsAndFiles();

/**
 * Contains paths to subfolders of Jake/API
 */
jakeApiDirectories = {
    'describeTagsOutputDir'       : path.resolve(jsdocPaths.jsdocDocsLocation, 'Jake/API/describeTags'),
    'jsdocRootOutputDir'          : path.resolve(jsdocPaths.jsdocDocsLocation, 'Jake/API/jsdoc'),
    'commandlineOptionsOutputDir' : path.resolve(jsdocPaths.jsdocDocsLocation, 'Jake/API/help')
};

exports.jsdocPaths                  = jsdocPaths;
exports.jakeApiDirectories          = jakeApiDirectories;
exports.verifyJsdocPathsAndFiles    = verifyJsdocPathsAndFiles;
exports.generateMissingTagsArticles = generateMissingTagsArticles;
