/*jslint indent: 4, maxerr: 50, white: true, node: true, stupid: true */

/**
 * @file This file contains code to regenerate the api documentation for
 *  JSDoc 3 and merge it into the documentation website.
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @version 20121030
 * @requires fs
 * @requires events
 * @requires util
 * @requires atropa-cmd
 * @requires utilities
 * @exports apiGenerator
 */

'use strict';

var fs, path, util, events;

fs     = require('fs');
path   = require('path');
util   = require('util');
events = require('events');

/**
 * Class containing the functions and data necessary for
 * regenerating the API data to JSDoc 3.
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @class
 * @requires events
 * @requires util
 * @requires atropa-cmd
 * @requires utilities
 */
function ApiGenerator() {
    
    events.EventEmitter.call(this);
    
    var cmd,
        utilities;
    
    cmd       = require('atropa-cmd');
    utilities = require('./utilities');

    this.on('error',
        function(err) {
            console.log(err);
            process.exit(1);
        }
    );
    
    /**
     * Regenerates the API documentation for JSDoc 3. Then either calls jake
     * to rebuild the docs or calls the callback.
     * @param {Function} callback If supplied, this will execute aget API docs
     *  have been generated. Otherwise, the default jake task will be run.
     */
    this.generateDocs = function generateDocs(callback) {
        callback = callback || false;
        var syncReg,
            asyncReg,
            jsdocLocation,
            places,
            recurse,
            source,
            destination,
            apiCommand,
            describeTagsCommand,
            consoleDataWriter;
        
        asyncReg = new cmd.commandRegister.Asynchronous('async');
        
        asyncReg.on('command queue processed', function (name) {
            console.log('async register ' + name + ' has finished');
            callback();
        });
        
        jsdocLocation = path.resolve(utilities.jsdocPaths.jsdocLocation);
        describeTagsCommand = 'jsdoc --describeTags htmlFiles -d ' + utilities.jakeApiDirectories.describeTagsOutputDir + ' -c ' + path.resolve(utilities.jsdocPaths.jsdocDocsLocation, 'Jake/confFiles/conf.json');
        
        places = [
            'rhino_modules',
            'templates',
            'plugins',
            'node_modules',
            'jsdoc.js'
        ];
        
        places.forEach(function(place) {
            if(place === 'jsdoc.js') {
                recurse = '';
            } else {
                recurse = ' -r ';
            }
            source = path.resolve(jsdocLocation + '/' + place);
            source = path.relative(jsdocLocation, source);
            destination = path.resolve(utilities.jakeApiDirectories.jsdocRootOutputDir + '/' + place);
            
            apiCommand = 'jsdoc' + recurse + ' -p ' + source + ' -d ' + destination;
            
            asyncReg.addCommand(apiCommand, jsdocLocation);
        });
        
        consoleDataWriter = function(err, stdout, stderr) {
            console.log('writing commandline options file');
            var outFile = path.resolve(utilities.jakeApiDirectories.commandlineOptionsOutputDir, 'help');
            fs.writeFile(outFile, String(stdout), 'utf8');
        };
        asyncReg.addCommand('jsdoc --help', jsdocLocation, consoleDataWriter);
        
        asyncReg.addCommand(describeTagsCommand, jsdocLocation);
        
        console.log('Generating API docs from JSDoc 3 sources...');
        asyncReg.process();
        
    };
    
}
util.inherits(ApiGenerator, events.EventEmitter);

exports.ApiGenerator = ApiGenerator;
