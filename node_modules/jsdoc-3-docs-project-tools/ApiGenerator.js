/*jslint indent: 4, maxerr: 50, white: true, node: true, stupid: true */

/**
 * @file This file contains code to regenerate the api documentation for
 *  JSDoc 3 and merge it into the documentation website.
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @version 20121030
 * @module ApiGenerator
 * @requires fs
 * @requires path
 * @requires events
 * @requires util
 * @exports ApiGenerator
 */

'use strict';

var fs, path, util, events;

fs     = require('fs');
path   = require('path');
events = require('events');
util   = require('util');

/**
 * Class containing the functions and data necessary for
 *  regenerating the API docs of JSDoc 3.
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @class
 * @requires atropa-cmd
 * @requires utilities
 */
function ApiGenerator() {
    
    events.EventEmitter.call(this);
    
    var cmd,
        utilities;
    
    cmd       = require('atropa-cmd');
    utilities = require('./utilities');

    this.on('error',
        function(err) {
            console.log(err);
            process.exit(1);
        }
    );
    
    /**
     * Regenerates the API documentation for JSDoc 3. Then executes the callback.
     * @param {Function} callback If supplied, this will execute after API docs
     *  have been generated.
     */
    this.generateDocs = function generateDocs(callback) {
        callback = callback || false;
        var asyncReg,
            jsdocLocation,
            places,
            describeTagsCommand,
            consoleDataWriter;
        
        asyncReg = new cmd.commandRegister.Asynchronous('async');
        
        asyncReg.on('command queue processed', function (name) {
            console.log('async register ' + name + ' has finished');
            callback();
        });
        
        jsdocLocation = path.resolve(utilities.jsdocPaths.jsdocLocation);
        describeTagsCommand = 'jsdoc --describeTags htmlFiles -d ' + utilities.jakeApiDirectories.describeTagsOutputDir + ' -c ' + path.resolve(utilities.jsdocPaths.jsdocDocsLocation, 'Jake/confFiles/conf.json');
        
        places = [
            'rhino_modules',
            'plugins',
            'templates/default',
            'templates/haruki',
            'templates/prettyPrintSource',
            'jsdoc.js',
            'rhino_modules/common',
            'rhino_modules/jsdoc',
            'node_modules/async',
            'node_modules/crypto-browserify',
            'node_modules/github-flavored-markdown',
            'node_modules/js2xmlparser',
            'node_modules/jshint',
            'node_modules/markdown',
            'node_modules/taffydb',
            'node_modules/underscore',
            'node_modules/wrench'
        ];
        
        places.forEach(function(place) {
            var recurse,
                source,
                destination,
                apiCommand;
            
            switch(place) {
                case 'rhino_modules' :
                    recurse = '';
                    break;
                case 'templates/default' :
                    recurse = '';
                    break;
                case 'templates/haruki' :
                    recurse = '';
                    break;
                case 'templates/prettyPrintSource' :
                    recurse = '';
                    break;
                case 'plugins' :
                    recurse = '';
                    break;
                case 'jsdoc.js' :
                    recurse = '';
                    break;
                default:
                    recurse = ' -r ';
            }
            
            source = path.resolve(jsdocLocation + '/' + place);
            source = path.relative(jsdocLocation, source);
            destination = path.resolve(utilities.jakeApiDirectories.jsdocRootOutputDir + '/' + place.replace(/\\|\//g,'-'));
            
            apiCommand = 'jsdoc' + recurse + ' -p ' + source + ' -d ' + destination;
            
            asyncReg.addCommand(apiCommand, jsdocLocation);
        });
        
        consoleDataWriter = function(err, stdout, stderr) {
            console.log('writing commandline options file');
            var outFile = path.resolve(utilities.jakeApiDirectories.commandlineOptionsOutputDir, 'help');
            fs.writeFile(outFile, String(stdout), 'utf8');
        };
        
        asyncReg.addCommand('jsdoc --help', jsdocLocation, consoleDataWriter);
        
        asyncReg.addCommand(describeTagsCommand, jsdocLocation);
        
        console.log('Generating API docs from JSDoc 3 sources...');
        asyncReg.process();
        
    };
    
}
util.inherits(ApiGenerator, events.EventEmitter);

exports.ApiGenerator = ApiGenerator;