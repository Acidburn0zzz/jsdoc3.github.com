/*jslint indent: 4, maxerr: 50, white: true, node: true, stupid: true */

/**
 * @file This file contains code to build html files from articles formatted with our custom mustache tags.
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @version 20121030
 * @requires ArticleParser
 * @requires mustacheFunctions
 * @requires fs
 * @requires events
 * @requires util
 * @requires path
 * @requires utilities
 * @requires jsdoc3_utilities
 * @requires ArticleParser
 * @requires mustacheFunctions
 * @requires Jsdoc3_api_generator
 * @requires colors
 * @exports Jsdoc3SiteBuilder
 */

'use strict';

var fs,
    events,
    util,
    path,
    directory,
    jsdoc3_utilities,
    articleParser,
    mustacheFunctions,
    generator,
    colors;

    
fs     = require('fs');
events = require('events');
util   = require('util');
path   = require('path');
colors = require('colors');
colors.setTheme(JSON.parse(fs.readFileSync('jake/confFiles/consoleColors.json', 'utf8')));

/** @see utilities.directory */
directory        = require('utilities').directory;
/** @see jsdoc3_utilities */
jsdoc3_utilities = require('jsdoc3_utilities');
/** @see ArticleParser */
articleParser    = new (require('ArticleParser').ArticleParser)();
/** @see mustacheFunctions */
mustacheFunctions= require('mustacheFunctions');
/** @see jsdoc3_api_generator */
generator        = new (require('jsdoc3_api_generator').Jsdoc3_api_generator)();

/**
 * Represents the jsdoc 3 website builder.
 * @class
 */
function Jsdoc3SiteBuilder() {
    

    
    /** Holds the array of articles */
    this.articles = [];
    
    /**
     * The source directory where article files are found.
     * @default <code> Jake/articles </code>
     */
    this.srcdir = 'Jake/articles/';
    
    /**
     * The directory to put the generated site pages into.
     * @default <code> ./ </code>
     */
    this.outdir = './';
}

/**
 * Purges directories before regenerating updated files.
 */
Jsdoc3SiteBuilder.prototype.preClean = function preClean() {
    console.log('Cleaning pages...'.info);
    [
        this.outdir,
        'Jake/API/describeTags',
        'Jake/API/jsdoc/jsdoc.js',
        'Jake/API/jsdoc/node_modules',
        'Jake/API/jsdoc/plugins',
        'Jake/API/jsdoc/rhino_modules',
        'Jake/API/jsdoc/templates'
    ].forEach(function(where) {
        directory.purgeHtmlPages(where);
    });
};

/**
 * Generates missing tag articles and extended documents files for new tags.
 */
Jsdoc3SiteBuilder.prototype.generateMissingTagsArticles = function generateMissingTagsArticles() {
    jsdoc3_utilities.generateMissingTagsArticles();
};

Jsdoc3SiteBuilder.prototype.parseArticles = function parseArticles() {
    console.log('Building index...'.info);
    articleParser.loadArticleFiles(this.srcdir);
    this.articles = articleParser.getArticles();
};

/**
 * Builds all site pages from sources.
 */
Jsdoc3SiteBuilder.prototype.buildSitePages = function buildSitePages() {
    var mustachio;
    this.parseArticles();
    console.log('Building new pages...'.info);
    mustachio = new mustacheFunctions.MustacheComb();
    mustachio.generateArticles(this.articles, this.outdir);
};

/**
 * Runs all functions to completely regenerate the site.
 */
Jsdoc3SiteBuilder.prototype.buildSite = function buildSite() {
    var my = this;
    console.log('Building site...'.info);
    this.preClean();
    generator.generateDocs(function(){
        my.generateMissingTagsArticles();
        my.buildSitePages();
    });
};

exports.Jsdoc3SiteBuilder =Jsdoc3SiteBuilder;