/*jslint indent: 4, maxerr: 50, white: true, node: true, stupid: true */

/**
 * @file This file contains functions that call the various commandlines
 *  required for maintaining the documentation website.
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @version 20121030
 * @requires path
 * @requires cmd
 * @exports runJake
 * @exports runJsdocOn
 * @exports rebuildDescribeTags
 */

'use strict';

var cmd, path;

cmd = require('cmd');
path = require('path');

/**
 * Runs jake in the documentation project.
 * @function
 * @param {String} jakeLocation The directory to run jake from. <start dir>
 * @param {String} jakeFile Optional. The file to run through Jake.
 * @param {Function} callback Optional. A function to execute upon
 *  completion. The callback will be passed the error, stdout, and stderr
 *  arguments.
 */
exports.runJake = function runJake(jakeFile, jakeLocation, callback) {
    jakeLocation = path.resolve(jakeLocation);
    jakeFile = (jakeFile) ? ' -f ' + path.resolve(jakeFile) : '';
    cmd.asynchronousCommand('jake' + jakeFile, jakeLocation, callback);
};

/**
 * Runs jsdoc using the source and destination supplied.
 * @function
 * @param {String} jsdocLocation Set to the path to the jsdoc folder.
 * @param {String} source The path to the source directory or file.
 * @param {String} destination Optional. The path to the destination directory.
 * @param {Boolean} recurse Optional. Set to true to enable JSDoc 3 to
 *  recurse into subdirectories.
 * @param {String} configFileLoc Optional. Set as the path to the config.json file.
 * @param {Function} callback Optional. A function to execute upon
 *  completion. The callback will be passed the error, stdout, and stderr
 *  arguments.
 */
exports.runJsdocOn = function runJsdocOn(jsdocLocation, source, destination, recurse, configFileLoc, callback) {
    jsdocLocation = (jsdocLocation) ? path.resolve(jsdocLocation) : '';
    source = path.relative(jsdocLocation, path.resolve(source));
    destination = (destination) ? ' -d ' + path.resolve(destination) : '';
    recurse = (recurse) ? ' -r' : '';
    configFileLoc = (configFileLoc) ? ' -c ' + path.resolve(configFileLoc) : '';
    
    var command;
    
    command = 'jsdoc' + recurse + ' -p ' + source + destination + configFileLoc;
    
    cmd.asynchronousCommand(command, jsdocLocation, callback);
};

/**
 * Calls <code>jsdoc --describeTags htmlFiles -d <jsdoc3.github.com>
 * </code>to update the tags definition files.
 * @function
 * @param {String} jsdocLocation Set to the path to the jsdoc folder.
 * @param {String} destination Optional. The path to the destination directory.
 * @param {Function} callback Optional. A function to execute upon
 *  completion. The callback will be passed the error, stdout, and stderr
 *  arguments.
 */
exports.rebuildDescribeTags = function rebuildDescribeTags(jsdocLocation, destination, callback) {
    jsdocLocation = path.resolve(jsdocLocation);
    destination = (destination) ? path.resolve(destination) : '';
    
    var describeTagsCommand;
    
    describeTagsCommand = 'jsdoc --describeTags htmlFiles -d ' + destination;
    
    cmd.asynchronousCommand(describeTagsCommand, jsdocLocation, callback);
};
