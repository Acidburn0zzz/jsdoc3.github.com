/*jslint indent: 4, maxerr: 50, white: true, node: true, stupid: true, evil: true */
/*global Mustache */

/**
 * @file This file contains the base MustacheComb class.
 * @author <a href="matthewkastor@gmail.com">Matthew Kastor</a>
 * @version 20121030
 * @requires fs
 * @exports MustacheComb
 */

'use strict';

var fs;

fs = require('fs');

var mustacheTemplateRegistry, mustacheTagHandlerRegistry;
mustacheTemplateRegistry   = require('mustacheTemplateRegistry').TemplateManager;
mustacheTagHandlerRegistry = require('mustacheTagHandlerRegistry').TagHandlerManager;


/**
 * The Base MustacheComb class. The templates
 *  and tag handlers shown in their registries will be loaded so, if
 *  you want to use this class directly then you'll need to reference
 *  your own tag handler and template registries.
 * @class
 * @param {Array} articles An array of article objects obtained from
 *  the ArticleParser or by other means. Defaults to an empty array.
 * @param {String} outdir The directory where you want files to eventually
 *  end up. Defaults to the current working directory.
 */
function MustacheComb(articles, outdir) {
    
    // set this.templates equal to the template registry
    mustacheTemplateRegistry.call(this);
    // set this.mustacheTagHandlers equal to the tag handler registry
    mustacheTagHandlerRegistry.call(this);
    // import the Mustache lib.
    //eval(fs.readFileSync('Jake/lib/mustache.js', 'utf-8'));
    
    this.articles = articles || [];
    this.outdir   = outdir   || './';
    this.Mustache = require('mustache');
}

exports.MustacheComb = MustacheComb;