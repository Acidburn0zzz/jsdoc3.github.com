<h3>
    Namepaths in JSDoc 3
</h3>

<p>
    When referring to a JavaScript variable that is elsewhere in your documentation, you must provide a unique identifier that maps to that variable. A namepath provides a way to do so and disambiguate between instance members, static members and inner variables.
</p>

<p>
    <b>Basic Syntax Examples of Nameptahs in JSDoc 3</b>
</p>

{{#includeExample}}
    jake/extended_docs/examples/about-namepaths-0.js
{{/includeExample}}

<p>
    The example below shows: an <em>instance</em> method named "say," an <em>inner</em> function also named "say," and a <em>static</em> method also named "say." These are three distinct methods that all exist independently of one another.
</p>

<p>
    <b>Use a documentation tag to describe your code.</b>
</p>

{{#includeExample}}
    jake/extended_docs/examples/about-namepaths-1.js
{{/includeExample}}

<p>
    You would use three different namepath syntaxes to refer to the three different methods:
</p>

<p>
    <b>Use a documentation tag to describe your code.</b>
</p>

{{#includeExample}}
    jake/extended_docs/examples/about-namepaths-2.js
{{/includeExample}}

<p>
    You might wonder why there is a syntax to refer to an inner method when that method isn't directly accessible from outside the function it is defined in. While that is true, and thus the "~" syntax is rarely used, it <em>is</em> possible to return a reference to an inner method from another method inside that container, so it is possible that some object elsewhere in your code might borrow an inner method.
</p>

<p>
    Note that if a constructor has an instance member that is also a constructor, you can simply chain the namepaths together to form a longer namepath:
</p>

<p>
    <b>Use a documentation tag to describe your code.</b>
</p>

{{#includeExample}}
    jake/extended_docs/examples/about-namepaths-3.js
{{/includeExample}}

<p>
    In this case, to refer to the method named "consider," you would use the following namepath: <code>Person#Idea#consider</code>
</p>

<p>
    This chaining can be used with any combination of the connecting symbols: <code># . ~</code>
</p>
