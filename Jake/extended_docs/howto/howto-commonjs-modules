<h3>
    Overview
</h3>

<p>
    JSDoc 3 has built-in support for JavaScript code that is written to conform to the <a href="http://wiki.commonjs.org/wiki/Modules/1.1">CommonJS Modules standard</a>. This allows you to easily document your own JavaScript modules and the members they export.
</p>

<h3>
    Document a Simple CommonJS Module
</h3>

<p>
    Add a single <code>@module &lt;module identifier&gt;</code> tag at the top of the file that defines your module and any documented members of the <code>exports</code> object in that file will automatically be included in the documentation for that module.
</p>

<p>
    <b>The putOn and unbutton methods are documented as members of the "my/shirt" module.</b>
</p>

{{#includeExample}}
    jake/extended_docs/examples/howto-commonjs-modules-0.js
{{/includeExample}}

<h3>
    Document Members Assigned to <code>module.exports</code>
</h3>

<p>
    Some implementations of the CommonJS Modules standard allow you to assign an object literal to the <code>module.exports</code> namespace directly. This pattern is automatically supported by JSDoc 3.
</p>

<p>
    <b>The blend and darken methods are documented as members of the "color/mixer" module.</b>
</p>

{{#includeExample}}
    jake/extended_docs/examples/howto-commonjs-modules-1.js
{{/includeExample}}

<h3>
    Document Members Exported on the Global <code>this</code>
</h3>

<p>
    JSDoc 3 understands the NodeJS convention of exporting properties and functions when they are assigned to a global <code>this</code> variable, as shown below.
</p>

<p>
    <b>The Book class is documented as a member of the "bookshelf" module.</b>
</p>

{{#includeExample}}
    jake/extended_docs/examples/howto-commonjs-modules-2.js
{{/includeExample}}

<h3>
    Document a Function that returns a RequireJS Module
</h3>

<p>
    The RequireJS library provides a <code>define</code> method that allows you to write a function to return a module object. Use the <code>@exports</code> tag to document that all the members of an object literal should be documented as members of a module.
</p>

<p>
    <b>The color property and the Turtleneck class are documented as members of the "my/shirt" module.</b>
</p>

{{#includeExample}}
    jake/extended_docs/examples/howto-commonjs-modules-3.js
{{/includeExample}}

<h3>
    Document a Module as a Constructor
</h3>

<p>
    The following examples illustrate patterns for documenting modules that are constructors.
</p>

<p>
    <b>Use the @alias tag simplify documenting a constructor-module in RequireJS.</b>
</p>

{{#includeExample}}
    jake/extended_docs/examples/howto-commonjs-modules-4.js
{{/includeExample}}

<p>
    The same pattern can be documented in CommonJS environments.
</p>

<p>
    <b>Use the @alias tag to document constructor-modules in CommonJS.</b>
</p>

{{#includeExample}}
    jake/extended_docs/examples/howto-commonjs-modules-5.js
{{/includeExample}}

<h3>
    Document Multiple RequireJS Modules Defined in a Single File
</h3>

<p>
    If you have multiple calls to <code>define</code> in a single file use the <code>@exports</code> tag to document each function that returns module code. Name the exported objects "exports" and JSDoc 3 will automatically document any of their members as members of their module.
</p>

<p>
    <b>The getStyleProperty and isInHead methods are documented as members of the "html/utils" module. The Tag class is documented as a member of the "tag" module.</b>
</p>

{{#includeExample}}
    jake/extended_docs/examples/howto-commonjs-modules-6.js
{{/includeExample}}

<h3>
    See Also
</h3>

<ul>
    <li>
        <a href="http://requirejs.org/docs/api.html#define">Defining RequireJS Modules</a>
    </li>

    <li>
        <a href="http://nodejs.org/docs/v0.4.1/api/modules.html">NodeJS Modules Tutorial</a>
    </li>
</ul>
